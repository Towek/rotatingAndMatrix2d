// Generated by CoffeeScript 1.10.0
(function() {
  var degreeCurrent, ready, rotate1Times, rotate2Times, rotateAnim;

  degreeCurrent = 0;

  rotate1Times = [];

  rotate2Times = [];

  ready = function() {
    var degree, doc, loading, loading2, mouse, output, output2, screenCenter;
    output = $("#output");
    output2 = $("#output2");
    loading = $("#loading");
    loading2 = $("#loading2");
    degree = $("#debug_degree");
    screenCenter = {
      x: $(document).width() / 2,
      y: $(document).height() / 2
    };
    output.css({
      'top': screenCenter.y - output.height() / 2
    });
    output.css({
      'left': screenCenter.x - output.width() / 2 - 500
    });
    output2.css({
      'top': screenCenter.y - output.height() / 2
    });
    output2.css({
      'left': screenCenter.x - output.width() / 2 + 500
    });
    doc = $(document);
    mouse = {
      x: 1,
      y: 1
    };

    /*$(window).mousemove (event)->
      #console.log "Mouse move"
      mouse.x = event.pageX
      mouse.y = event.pageY
      #console.log "X: "+mouse.x+"     "+"Y: "+mouse.y
      ##console.log outputPos.top
      output.css "top": output.css 'top' + mouse.y/3
      output.css "left": output.css 'left' + mouse.x/3
      #console.log mouse.x+"   "+mouse.y
     */
    setInterval((function() {
      var matrix, rotate1Time, start;
      start = performance.now();
      rotateAnim(90, 0.1, "#output");
      degree.html(degreeCurrent);
      matrix = new WebKitCSSMatrix(getComputedStyle($('#output')[0]).webkitTransform);
      loading.css({
        'top': output.width() * matrix.c - output.width() * matrix.a + screenCenter.y + output.height() / 2 - loading.height()
      });
      loading.css({
        'left': output.css('left')
      });
      rotate1Time = performance.now() - start;
      return rotate1Times.push(rotate1Time);
    }), 10);
    setInterval((function() {
      var matrix, rads, rotate2Time, start;
      start = performance.now();
      rotateAnim(90, 0.1, "#output2");
      rads = degreeCurrent / (180 / Math.PI);
      matrix = (output2.height() * Math.sin(rads) + output2.height() * Math.cos(rads)) * -1;
      loading2.css({
        'top': matrix + screenCenter.y + output.height() / 2 - loading.height()
      });
      loading2.css({
        'left': output2.css('left')
      });
      rotate2Time = performance.now() - start;
      return rotate2Times.push(rotate2Time);
    }), 1);
    return setInterval((function() {
      var avg, i, j, len, len1, sum, time;
      sum = 0;
      for (i = 0, len = rotate1Times.length; i < len; i++) {
        time = rotate1Times[i];
        sum += time;
      }
      avg = sum / rotate1Times.length;
      rotate1Times = [];
      $('#ms1').text('Rotate 1 takes about ' + avg + 'ms to execute and runs for ' + sum + 'ms every second.');
      sum = 0;
      for (j = 0, len1 = rotate2Times.length; j < len1; j++) {
        time = rotate2Times[j];
        sum += time;
      }
      avg = sum / rotate2Times.length;
      rotate2Times = [];
      return $('#ms2').text('Rotate 2 takes about ' + avg + 'ms to execute and runs for ' + sum + 'ms every second.');
    }), 1000);
  };

  rotateAnim = function(degree, speed, target) {
    $(target).css({
      '-webkit-transform': 'rotate(' + degreeCurrent + 'deg)',
      '-moz-transform': 'rotate(' + degreeCurrent + 'deg)',
      '-ms-transform': 'rotate(' + degreeCurrent + 'deg)',
      '-o-transform': 'rotate(' + degreeCurrent + 'deg)',
      'transform': 'rotate(' + degreeCurrent + 'deg)'
    });
    if (degreeCurrent < degree) {
      return degreeCurrent += speed;
    } else {
      return degreeCurrent = 0;
    }
  };

  $(document).ready(ready);

}).call(this);
