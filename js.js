// Generated by CoffeeScript 1.10.0
(function() {
  var degreeCurrent, ready, rotateAnim;

  degreeCurrent = 0;

  ready = function() {
    var degree, doc, loading, loading2, mouse, output, output2, screenCenter;
    output = $("#output");
    output2 = $("#output2");
    loading = $("#loading");
    loading2 = $("#loading2");
    degree = $("#debug_degree");
    screenCenter = {
      x: $(document).width() / 2,
      y: $(document).height() / 2
    };
    output.css({
      'top': screenCenter.y - output.height() / 2
    });
    output.css({
      'left': screenCenter.x - output.width() / 2 - 500
    });
    output2.css({
      'top': screenCenter.y - output.height() / 2
    });
    output2.css({
      'left': screenCenter.x - output.width() / 2 + 500
    });
    doc = $(document);
    mouse = {
      x: 1,
      y: 1
    };

    /*$(window).mousemove (event)->
      #console.log "Mouse move"
      mouse.x = event.pageX
      mouse.y = event.pageY
      #console.log "X: "+mouse.x+"     "+"Y: "+mouse.y
      ##console.log outputPos.top
      output.css "top": output.css 'top' + mouse.y/3
      output.css "left": output.css 'left' + mouse.x/3
      #console.log mouse.x+"   "+mouse.y
     */
    setInterval((function() {
      var matrix;
      rotateAnim(90, 0.1, "#output");
      degree.html(degreeCurrent);
      matrix = new WebKitCSSMatrix(getComputedStyle($('#output')[0]).webkitTransform);
      loading.css({
        'top': output.width() * matrix.c - output.width() * matrix.a + screenCenter.y + output.height() / 2 - loading.height()
      });
      return loading.css({
        'left': output.css('left')
      });
    }), 1);
    return setInterval((function() {
      var matrix, rads;
      rotateAnim(90, 0.1, "#output2");
      rads = degreeCurrent / (180 / Math.PI);
      matrix = (output2.height() * Math.sin(rads) + output2.height() * Math.cos(rads)) * -1;
      loading2.css({
        'top': matrix + screenCenter.y + output.height() / 2 - loading.height()
      });
      return loading2.css({
        'left': output2.css('left')
      });
    }), 1);
  };

  rotateAnim = function(degree, speed, target) {
    $(target).css({
      '-webkit-transform': 'rotate(' + degreeCurrent + 'deg)',
      '-moz-transform': 'rotate(' + degreeCurrent + 'deg)',
      '-ms-transform': 'rotate(' + degreeCurrent + 'deg)',
      '-o-transform': 'rotate(' + degreeCurrent + 'deg)',
      'transform': 'rotate(' + degreeCurrent + 'deg)'
    });
    if (degreeCurrent < degree) {
      return degreeCurrent += speed;
    } else {
      return degreeCurrent = 0;
    }
  };

  $(document).ready(ready);

}).call(this);
